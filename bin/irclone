#!/bin/bash

if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  printf "Usage: irclone [ORIGIN_PATH] [DESTINATION_PATH] [EXCLUDE]\n\n"
  printf "  [ORIGIN_PATH] -> The path in your local machine in which you want to listen for changes and uploading it to DESTINATION_PATH.\n\n"
  printf "  [DESTINATION_PATH] -> The rclone path in which you want to store all the data from ORIGIN_PATH.\n\n"
  printf "  [EXCLUDE] -> Regular expresion with the files / folders you want to exclude. ex: (.*\.swp|.ssh|.cache)\n\n"
  printf "This variables can be set eather by input or by environment.\n"
  exit 0
fi

if [ -n "$1" ]; then ORIGIN_PATH=$1; fi

if [ -n "$2" ]; then DESTINATION_PATH=$2; fi

if [ -n "$3" ]; then EXCLUDE=$3; fi

if [ -z "$ORIGIN_PATH" ]; then
  printf -- "\033[31mERROR - ORIGIN_PATH not found\033[0m\n"
  $0 -h
  exit 1
fi

if [ -z "$DESTINATION_PATH" ]; then
  printf -- "\033[31mERROR - DESTINATION_PATH not found\033[0m\n"
  $0 -h
  exit 1
fi

if [ -z "$EXCLUDE" ]; then
  printf -- "\033[33mWARNING - EXCLUDE not found... Using default.\033[0m\n"
  EXCLUDE='(\.swp$|\.ssh($|/)|\.cache($|/)|\.git($|/))'
fi

#Create origin folder if not exist
mkdir -p $ORIGIN_PATH

printf -- "\033[33mWARNING - If you delete $ORIGIN_PATH all the data in the destination will be deleted and the listener will stop working\033[0m\n"
printf -- "\033[33mTo avoid folder deletion use 'sudo chattr +i $ORIGIN_PATH'\033[0m\n"

printf -- "\033[36mLooking for exisiting data...\033[0m\n"
rclone lsf $DESTINATION_PATH &>/dev/null
if [ $? == "0" ]; then
  printf -- "\033[36mAdding data to $ORIGIN_PATH\033[0m\n"
  rclone copy --create-empty-src-dirs -v --exclude-from /etc/irclone/exclude "$DESTINATION_PATH" "$ORIGIN_PATH"
else
  printf -- "\033[36mNothing to add to $ORIGIN_PATH\033[0m\n"
fi

printf -- "\033[36mSyncing data\033[0m\n"
rclone sync -v --exclude-from /etc/irclone/exclude "$ORIGIN_PATH" "$DESTINATION_PATH"

declare -A uploaded

for path in $(find $ORIGIN_PATH); do
  if [ -d $path ]; then
    uploaded["$path"]=true
  fi
  if [ -f $path ]; then
    md5=($(md5sum $path))
    uploaded["$path"]=$md5
  fi
done

printf -- "\033[36mListening for changes in $ORIGIN_PATH\033[0m\n"

function upload {
    md5=($(md5sum $path 2> /dev/null))
    if [ "${uploaded[$path]}" != "$md5" ]; then
      printf -- "\033[32m$path $status\033[0m\n"
      abs_path=$(dirname "$abs_path")
      rclone copy -v --no-traverse "$path" "$DESTINATION_PATH$abs_path"
      uploaded["$path"]=$md5
    fi
}

inotifywait -m -q -r --exclude $EXCLUDE --format "%w%f %e" -e create,modify,delete,moved_from,moved_to $ORIGIN_PATH | while read -ra data; do
  status="${data[-1]}"
  unset data[-1]
  path="${data[@]}"
  abs_path=$(echo "${data[@]}" | sed "s|$ORIGIN_PATH||")

  case $status in
  CREATE,ISDIR)
    if [ "${uploaded[$path]}" != true ]; then
      printf -- "\033[32m$path $status\033[0m\n"
      rclone copy -v --no-traverse "$path" "$DESTINATION_PATH$abs_path"
      for path in $(find $path); do
        if [ -d $path ]; then
          uploaded["$path"]=true
        fi
        if [ -f $path ]; then
          md5=($(md5sum $path))
          uploaded["$path"]=$md5
        fi
      done
    fi
    ;;
  CREATE|MODIFY)
    upload
    ;;
  DELETE)
    if [ -d $(dirname "$path") ] && [ -n "${uploaded[$path]}" ]; then
      printf -- "\033[32m$path $status\033[0m\n"
      rclone deletefile -v --no-traverse "$DESTINATION_PATH$abs_path"
      unset uploaded["$path"]
    fi
    ;;
  DELETE,ISDIR)
    if [ -d $(dirname "$path") ] && [ "${uploaded[$path]}" == true ];then
      printf -- "\033[32m$path $status\033[0m\n"
      rclone purge -P --no-traverse "$DESTINATION_PATH$abs_path"
      unset uploaded["$path"]
    fi
    ;;
  MOVED_FROM | MOVED_FROM,ISDIR)
    from="$path"
    abs_from="$abs_path"
    ;;
  MOVED_TO | MOVED_TO,ISDIR)
    if [ -n "${uploaded[$from]}" ];then
      rclone moveto -v --no-traverse "$DESTINATION_PATH$abs_from" "$DESTINATION_PATH$abs_path"
      uploaded["$path"]=uploaded["$from"]
      unset uploaded["$from"]
    else
      upload
    fi
    ;;
  esac
done
